---

# Note:
# If system is not subscribed, status is "Unknown", rc=1
# If system is subscribed,  status is "Current", rc=0
# If SCA is enabled, status is "Disabled", rc=0
- name: Check Subscription Status
  ansible.builtin.shell: |
     set -o pipefail
     LANG=C subscription-manager status | awk  -F: ' ( $1 == "Overall Status" ) { print $2 } ' | tr -d ' '
  register: register_subscription_status
  changed_when: false
  failed_when: false

- name: Make sure registration credentials are provided
  ansible.builtin.fail:
    msg: "please provide registration credentials for this system"
  when: >
    ( register_subscription_status.stdout != "Subscribed" ) and
    ( ((reg_activation_key is not defined) or (reg_organization_id is not defined)) and
    ((reg_username is not defined ) or (reg_password is not defined)) )

- name: "Ensure credentials are installed for Satellite 6 server {{ satellite_server }}"
  ansible.builtin.yum:
    name: "{{ 'http://' + satellite_server + '/pub/katello-ca-consumer-latest.noarch.rpm' }}"
    state: present
    validate_certs: false
  when: not( (satellite_server is undefined) or (satellite_server is none) or (satellite_server | trim == '') )

- name: Ensure no old invalid credentials are kept on the RHSM server
  ansible.builtin.command: subscription-manager unregister
  failed_when: false
  environment:
    LANG: C
  when:
    - register_subscription_status.stdout != "Current"
    - register_subscription_status.stdout != "Disabled"

- name: Ensure no old invalid credentials are kept on the system
  ansible.builtin.command: subscription-manager clean
  environment:
    LANG: C
  when:
    - register_subscription_status.stdout != "Current"
    - register_subscription_status.stdout != "Disabled"


- name: Ensure system is registered using known activation key
  community.general.redhat_subscription:
    activationkey: "{{ reg_activation_key | default(omit) }}"
    org_id: "{{ reg_organization_id | default(omit) }}"
    pool: "{{ reg_pool | default(omit) }}"
    pool_ids: "{{ reg_pool_ids | default(omit) }}"
    server_insecure: "{{ reg_server_insecure | default('no') }}"
    autosubscribe: "{{ reg_autosubscribe | default(omit) }}"
    username: "{{ reg_username | default(omit) }}"
    password: "{{ reg_password | default(omit) }}"
    server_proxy_hostname: "{{ reg_server_proxy_hostname | default(omit) }}"
    server_proxy_port: "{{ reg_server_proxy_port | default(omit) }}"
    server_proxy_user: "{{ reg_server_proxy_user | default(omit) }}"
    server_proxy_password: "{{ reg_server_proxy_password | default(omit) }}"
    release: "{{ reg_osrelease | default(omit) }}"
    state: present
  when:
    - register_subscription_status.stdout != "Current"
    - register_subscription_status.stdout != "Disabled"
  ignore_errors: true
  register: register_subscribe_result

- name: Display Result
  debug:
    var: register_subscribe_result

- name: Ignore certain errors
  fail:
    msg: "The previous error cannot be ignored"
  when:
    - register_subscription_status.stdout != "Current"
    - register_subscription_status.stdout != "Disabled"
    - register_subscribe_result.failed
    - not ("The system has been registered with ID" in register_subscribe_result.stdout_lines[0])

- name: Ensure system relase is locked if required
  block:

    - name: Get current release
      command: subscription-manager release
      register: register_current_os_release
      changed_when: false

    - name: Set required OS release
      command: subscription-manager release --set "{{ reg_osrelease }}"
      when: reg_osrelease != register_current_os_release.stdout

  when:
    - reg_osrelease is defined

- name: 'Disable all yum-repositories'
  yum_repository:
    name: '*'
    state: absent
  notify: Yum-clean-metadata
  when: repo_reset

- name: 'Disable all repositories except the required'
  rhsm_repository:
    name: "*"
    state: disabled
  notify: Yum-clean-metadata
  when: repo_reset

- name: 'Repository Setup'
  rhsm_repository:
    name: "{{ repositories }}"
    state: enabled
  notify: Yum-clean-metadata

...
